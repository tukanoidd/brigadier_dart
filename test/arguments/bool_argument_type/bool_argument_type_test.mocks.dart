// Mocks generated by Mockito 5.0.7 from annotations
// in brigadier_dart/test/arguments/bool_argument_type/bool_argument_type_test.dart.
// Do not manually edit this file.

import 'package:brigadier_dart/src/string_reader.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

/// A class which mocks [StringReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockStringReader extends _i1.Mock implements _i2.StringReader {
  MockStringReader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get string =>
      (super.noSuchMethod(Invocation.getter(#string), returnValue: '')
          as String);
  @override
  int get remainingLength =>
      (super.noSuchMethod(Invocation.getter(#remainingLength), returnValue: 0)
          as int);
  @override
  int get totalLength =>
      (super.noSuchMethod(Invocation.getter(#totalLength), returnValue: 0)
          as int);
  @override
  int get cursor =>
      (super.noSuchMethod(Invocation.getter(#cursor), returnValue: 0) as int);
  @override
  set cursor(int? newCursor) =>
      super.noSuchMethod(Invocation.setter(#cursor, newCursor),
          returnValueForMissingStub: null);
  @override
  String get read =>
      (super.noSuchMethod(Invocation.getter(#read), returnValue: '') as String);
  @override
  String get remaining =>
      (super.noSuchMethod(Invocation.getter(#remaining), returnValue: '')
          as String);
  @override
  bool canRead([int? length]) =>
      (super.noSuchMethod(Invocation.method(#canRead, [length]),
          returnValue: false) as bool);
  @override
  String peek([int? offset]) =>
      (super.noSuchMethod(Invocation.method(#peek, [offset]), returnValue: '')
          as String);
  @override
  String readAtCursor() =>
      (super.noSuchMethod(Invocation.method(#readAtCursor, []), returnValue: '')
          as String);
  @override
  void skip() => super.noSuchMethod(Invocation.method(#skip, []),
      returnValueForMissingStub: null);
  @override
  void skipWhitespace() =>
      super.noSuchMethod(Invocation.method(#skipWhitespace, []),
          returnValueForMissingStub: null);
  @override
  int readInt() =>
      (super.noSuchMethod(Invocation.method(#readInt, []), returnValue: 0)
          as int);
  @override
  double readDouble() =>
      (super.noSuchMethod(Invocation.method(#readDouble, []), returnValue: 0.0)
          as double);
  @override
  String readUnquotedString() =>
      (super.noSuchMethod(Invocation.method(#readUnquotedString, []),
          returnValue: '') as String);
  @override
  String readQuotedString() =>
      (super.noSuchMethod(Invocation.method(#readQuotedString, []),
          returnValue: '') as String);
  @override
  String readStringUntil(String? terminator) =>
      (super.noSuchMethod(Invocation.method(#readStringUntil, [terminator]),
          returnValue: '') as String);
  @override
  String readString() =>
      (super.noSuchMethod(Invocation.method(#readString, []), returnValue: '')
          as String);
  @override
  bool readBool() =>
      (super.noSuchMethod(Invocation.method(#readBool, []), returnValue: false)
          as bool);
  @override
  void expect(String? c) => super.noSuchMethod(Invocation.method(#expect, [c]),
      returnValueForMissingStub: null);
}
