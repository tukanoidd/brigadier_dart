// Mocks generated by Mockito 5.0.7 from annotations
// in brigadier_dart/test/builder/argument_builder/argument_builder_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:brigadier_dart/src/ambiguity_consumer.dart' as _i6;
import 'package:brigadier_dart/src/builder/argument_builder.dart' as _i3;
import 'package:brigadier_dart/src/context/command_context.dart' as _i10;
import 'package:brigadier_dart/src/context/command_context_builder.dart' as _i8;
import 'package:brigadier_dart/src/helpers.dart' as _i5;
import 'package:brigadier_dart/src/string_reader.dart' as _i7;
import 'package:brigadier_dart/src/suggestion/suggestions.dart' as _i2;
import 'package:brigadier_dart/src/suggestion/suggestions_builder.dart' as _i11;
import 'package:brigadier_dart/src/tree/command_node.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeSuggestions extends _i1.Fake implements _i2.Suggestions {}

/// A class which mocks [CommandNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandNode<T> extends _i1.Mock implements _i4.CommandNode<T> {
  MockCommandNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i4.CommandNode<T>> get children =>
      (super.noSuchMethod(Invocation.getter(#children), returnValue: [])
          as Iterable<_i4.CommandNode<T>>);

  @override
  int get hashCode => 0;

  @override
  _i5.Predicate<T> get requirement =>
      (super.noSuchMethod(Invocation.getter(#requirement),
          returnValue: (T? __p0) => false) as _i5.Predicate<T>);

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);

  @override
  String get usageText =>
      (super.noSuchMethod(Invocation.getter(#usageText), returnValue: '')
          as String);

  @override
  String get sortedKey =>
      (super.noSuchMethod(Invocation.getter(#sortedKey), returnValue: '')
          as String);

  @override
  bool get isFork =>
      (super.noSuchMethod(Invocation.getter(#isFork), returnValue: false)
          as bool);

  @override
  Iterable<String> get examples =>
      (super.noSuchMethod(Invocation.getter(#examples), returnValue: [])
          as Iterable<String>);

  @override
  _i4.CommandNode<T>? getChild(String? name) =>
      (super.noSuchMethod(Invocation.method(#getChild, [name]))
          as _i4.CommandNode<T>?);

  @override
  bool canUse(T? source) =>
      (super.noSuchMethod(Invocation.method(#canUse, [source]),
          returnValue: false) as bool);

  @override
  void addChild(_i4.CommandNode<T>? node) =>
      super.noSuchMethod(Invocation.method(#addChild, [node]),
          returnValueForMissingStub: null);

  @override
  void findAmbiguities(_i6.AmbiguityConsumer<T>? consumer) =>
      super.noSuchMethod(Invocation.method(#findAmbiguities, [consumer]),
          returnValueForMissingStub: null);

  @override
  bool isValidInput(String? input) =>
      (super.noSuchMethod(Invocation.method(#isValidInput, [input]),
          returnValue: false) as bool);

  @override
  bool operator ==(Object? other) {
    if (!(other is MockCommandNode)) return false;

    return true;
  }

  @override
  void parse(_i7.StringReader? reader,
          _i8.CommandContextBuilder<T>? contextBuilder) =>
      super.noSuchMethod(Invocation.method(#parse, [reader, contextBuilder]),
          returnValueForMissingStub: null);

  @override
  _i9.Future<_i2.Suggestions> listSuggestions(
          _i10.CommandContext<T>? context, _i11.SuggestionsBuilder? builder) =>
      (super.noSuchMethod(
              Invocation.method(#listSuggestions, [context, builder]),
              returnValue: Future<_i2.Suggestions>.value(_FakeSuggestions()))
          as _i9.Future<_i2.Suggestions>);

  @override
  _i3.ArgumentBuilder<T, dynamic> createBuilder() =>
      throw Exception('No Such Method!');

  @override
  Iterable<dynamic> getRelevantNodes(_i7.StringReader? input) =>
      (super.noSuchMethod(Invocation.method(#getRelevantNodes, [input]),
          returnValue: []) as Iterable<dynamic>);

  @override
  int compareTo(_i4.CommandNode<T>? other) => (super
          .noSuchMethod(Invocation.method(#compareTo, [other]), returnValue: 0)
      as int);
}
