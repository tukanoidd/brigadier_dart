// Mocks generated by Mockito 5.0.7 from annotations
// in brigadier_dart/test/context/command_context/command_context_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;

import 'package:brigadier_dart/brigadier_dart.dart';
import 'package:brigadier_dart/src/ambiguity_consumer.dart' as _i9;
import 'package:brigadier_dart/src/builder/argument_builder.dart' as _i3;
import 'package:brigadier_dart/src/builder/literal_argument_builder.dart'
    as _i17;
import 'package:brigadier_dart/src/command_dispatcher.dart' as _i15;
import 'package:brigadier_dart/src/context/command_context.dart' as _i13;
import 'package:brigadier_dart/src/context/command_context_builder.dart'
    as _i11;
import 'package:brigadier_dart/src/helpers.dart' as _i8;
import 'package:brigadier_dart/src/parse_results.dart' as _i6;
import 'package:brigadier_dart/src/result_consumer.dart' as _i16;
import 'package:brigadier_dart/src/string_reader.dart' as _i10;
import 'package:brigadier_dart/src/suggestion/suggestions.dart' as _i2;
import 'package:brigadier_dart/src/suggestion/suggestions_builder.dart' as _i14;
import 'package:brigadier_dart/src/tree/command_node.dart' as _i7;
import 'package:brigadier_dart/src/tree/literal_command_node.dart' as _i5;
import 'package:brigadier_dart/src/tree/root_command_node.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeSuggestions extends _i1.Fake implements _i2.Suggestions {}

class _FakeRootCommandNode<T> extends _i1.Fake
    implements _i4.RootCommandNode<T> {}

class _FakeLiteralCommandNode<T> extends _i1.Fake
    implements _i5.LiteralCommandNode<T> {}

class _FakeParseResults<T> extends _i1.Fake implements _i6.ParseResults<T> {}

/// A class which mocks [CommandNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandNode<T> extends _i1.Mock implements _i7.CommandNode<T> {
  MockCommandNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i7.CommandNode<T>> get children =>
      (super.noSuchMethod(Invocation.getter(#children), returnValue: [])
          as Iterable<_i7.CommandNode<T>>);

  @override
  int get hashCode => 0;

  @override
  RedirectModifier<T>? get redirectModifier => null;

  @override
  _i8.Predicate<T> get requirement =>
      (super.noSuchMethod(Invocation.getter(#requirement),
          returnValue: (T? __p0) => false) as _i8.Predicate<T>);

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);

  @override
  String get usageText =>
      (super.noSuchMethod(Invocation.getter(#usageText), returnValue: '')
          as String);

  @override
  String get sortedKey =>
      (super.noSuchMethod(Invocation.getter(#sortedKey), returnValue: '')
          as String);

  @override
  bool get isFork => false;

  @override
  Iterable<String> get examples =>
      (super.noSuchMethod(Invocation.getter(#examples), returnValue: [])
          as Iterable<String>);

  @override
  _i7.CommandNode<T>? getChild(String? name) =>
      (super.noSuchMethod(Invocation.method(#getChild, [name]))
          as _i7.CommandNode<T>?);

  @override
  bool canUse(T? source) =>
      (super.noSuchMethod(Invocation.method(#canUse, [source]),
          returnValue: false) as bool);

  @override
  void addChild(_i7.CommandNode<T>? node) =>
      super.noSuchMethod(Invocation.method(#addChild, [node]),
          returnValueForMissingStub: null);

  @override
  void findAmbiguities(_i9.AmbiguityConsumer<T>? consumer) =>
      super.noSuchMethod(Invocation.method(#findAmbiguities, [consumer]),
          returnValueForMissingStub: null);

  @override
  bool isValidInput(String? input) =>
      (super.noSuchMethod(Invocation.method(#isValidInput, [input]),
          returnValue: false) as bool);

  @override
  bool operator ==(Object? other) {
    if (!(other is MockCommandNode)) return false;

    return true;
  }

  @override
  void parse(_i10.StringReader? reader,
          _i11.CommandContextBuilder<T>? contextBuilder) =>
      super.noSuchMethod(Invocation.method(#parse, [reader, contextBuilder]),
          returnValueForMissingStub: null);

  @override
  _i12.Future<_i2.Suggestions> listSuggestions(
          _i13.CommandContext<T>? context, _i14.SuggestionsBuilder? builder) =>
      (super.noSuchMethod(
              Invocation.method(#listSuggestions, [context, builder]),
              returnValue: Future<_i2.Suggestions>.value(_FakeSuggestions()))
          as _i12.Future<_i2.Suggestions>);

  @override
  _i3.ArgumentBuilder<T, dynamic> createBuilder() =>
      throw Exception('No Such Method');

  @override
  Iterable<dynamic> getRelevantNodes(_i10.StringReader? input) =>
      (super.noSuchMethod(Invocation.method(#getRelevantNodes, [input]),
          returnValue: []) as Iterable<dynamic>);

  @override
  int compareTo(_i7.CommandNode<T>? other) => (super
          .noSuchMethod(Invocation.method(#compareTo, [other]), returnValue: 0)
      as int);
}

/// A class which mocks [Object].
///
/// See the documentation for Mockito's code generation for more information.
class MockObject extends _i1.Mock implements Object {
  MockObject() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get hashCode => 0;

  @override
  Type get runtimeType => Object;

  @override
  bool operator ==(Object? other) =>
      other.runtimeType == Object || other.runtimeType == MockObject;

  @override
  String toString() => 'Object';
}

/// A class which mocks [CommandDispatcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandDispatcher<T> extends _i1.Mock
    implements _i15.CommandDispatcher<T> {
  MockCommandDispatcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set consumer(_i16.ResultConsumer<T>? consumer) =>
      super.noSuchMethod(Invocation.setter(#consumer, consumer),
          returnValueForMissingStub: null);

  @override
  _i4.RootCommandNode<T> get root =>
      (super.noSuchMethod(Invocation.getter(#root),
          returnValue: _FakeRootCommandNode<T>()) as _i4.RootCommandNode<T>);

  @override
  _i5.LiteralCommandNode<T> register(_i17.LiteralArgumentBuilder<T>? command) =>
      (super.noSuchMethod(Invocation.method(#register, [command]),
              returnValue: _FakeLiteralCommandNode<T>())
          as _i5.LiteralCommandNode<T>);

  @override
  int executeString(String? input, T? source) =>
      (super.noSuchMethod(Invocation.method(#executeString, [input, source]),
          returnValue: 0) as int);

  @override
  int executeReader(_i10.StringReader? input, T? source) =>
      (super.noSuchMethod(Invocation.method(#executeReader, [input, source]),
          returnValue: 0) as int);

  @override
  int executeParse(_i6.ParseResults<T>? parse) =>
      (super.noSuchMethod(Invocation.method(#executeParse, [parse]),
          returnValue: 0) as int);

  @override
  _i6.ParseResults<T> parseString(String? command, T? source) =>
      (super.noSuchMethod(Invocation.method(#parseString, [command, source]),
          returnValue: _FakeParseResults<T>()) as _i6.ParseResults<T>);

  @override
  _i6.ParseResults<T> parseReader(_i10.StringReader? command, T? source) =>
      (super.noSuchMethod(Invocation.method(#parseReader, [command, source]),
          returnValue: _FakeParseResults<T>()) as _i6.ParseResults<T>);

  @override
  List<String> getAllUsage(
          _i7.CommandNode<T>? node, T? source, bool? restricted) =>
      (super.noSuchMethod(
          Invocation.method(#getAllUsage, [node, source, restricted]),
          returnValue: <String>[]) as List<String>);

  @override
  Map<_i7.CommandNode<T>, String> getSmartUsage(
          _i7.CommandNode<T>? node, T? source) =>
      (super.noSuchMethod(Invocation.method(#getSmartUsage, [node, source]),
              returnValue: <_i7.CommandNode<T>, String>{})
          as Map<_i7.CommandNode<T>, String>);

  @override
  _i12.Future<_i2.Suggestions> getCompletionSuggestions(
          _i6.ParseResults<T>? parse,
          [int? cursor]) =>
      (super.noSuchMethod(
              Invocation.method(#getCompletionSuggestions, [parse, cursor]),
              returnValue: Future<_i2.Suggestions>.value(_FakeSuggestions()))
          as _i12.Future<_i2.Suggestions>);

  @override
  Iterable<String> getPath(_i7.CommandNode<T>? target) => (super
          .noSuchMethod(Invocation.method(#getPath, [target]), returnValue: [])
      as Iterable<String>);

  @override
  _i7.CommandNode<T>? findNode(Iterable<String>? path) =>
      (super.noSuchMethod(Invocation.method(#findNode, [path]))
          as _i7.CommandNode<T>?);

  @override
  void findAmbiguities(_i9.AmbiguityConsumer<T>? consumer) =>
      super.noSuchMethod(Invocation.method(#findAmbiguities, [consumer]),
          returnValueForMissingStub: null);
}
